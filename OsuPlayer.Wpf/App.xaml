<Application x:Class="Milkitic.OsuPlayer.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:converter="clr-namespace:Milkitic.OsuPlayer.Converter"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <BitmapImage x:Key="TextrueSource1" CacheOption="OnLoad" UriSource="pack://application:,,,/OsuPlayer;component/Resources/osu_texture.png"/>
      <BitmapImage x:Key="GearS" CacheOption="OnLoad" UriSource="pack://application:,,,/OsuPlayer;component/Resources/gear_s.png"/>
        <BitmapImage x:Key="ExitS" CacheOption="OnLoad" UriSource="pack://application:,,,/OsuPlayer;component/Resources/exit_s.png"/>
        <BitmapImage x:Key="PlayS" CacheOption="OnLoad" UriSource="pack://application:,,,/OsuPlayer;component/Resources/ctxt_play_s.png"/>
        <BitmapImage x:Key="PauseS" CacheOption="OnLoad" UriSource="pack://application:,,,/OsuPlayer;component/Resources/ctxt_pause_s.png"/>
        <BitmapImage x:Key="PrevS" CacheOption="OnLoad" UriSource="pack://application:,,,/OsuPlayer;component/Resources/ctxt_prev_s.png"/>
        <BitmapImage x:Key="NextS" CacheOption="OnLoad" UriSource="pack://application:,,,/OsuPlayer;component/Resources/ctxt_next_s.png"/>

        <LinearGradientBrush x:Key="SliderBackground"  StartPoint="0,0" EndPoint="0,1">
            <GradientStop Offset="0" Color="#FFFC59A3"/>
            <GradientStop Offset="0.5" Color="#FFFD629A"/>
            <GradientStop Offset="1" Color="#FFFC59A3"/>
        </LinearGradientBrush>
        <!-- Window -->
        <Style x:Key="MainWindowStyle" TargetType="{x:Type Window}">
            <Setter Property="Background" Value="#DADADA" />
        </Style>
        <!-- Grid? -->
        <Style x:Key="Test" TargetType="{x:Type Grid}">
            <Setter Property="Background" Value="#777777" />
        </Style>
        <!-- Navigation label style -->
        <Style x:Key="NavigationLabelStyle" TargetType="{x:Type Label}">
            <Setter Property="FontSize" Value="12px" />
            <Setter Property="Foreground" Value="#888888" />
            <Setter Property="Margin" Value="0,10,0,0" />
        </Style>
        <!-- Config title style -->
        <Style x:Key="ConfigTitleStyle" TargetType="{x:Type Label}">
            <Setter Property="FontSize" Value="13px" />
            <Setter Property="Foreground" Value="#222222" />
            <Setter Property="Margin" Value="0,10,0,5" />
            <Setter Property="FontWeight" Value="Bold" />
        </Style>
        <!-- Config radio style -->
        <Style x:Key="ConfigRadioStyle" TargetType="{x:Type RadioButton}">
            <Setter Property="FontSize" Value="12px" />
            <Setter Property="Foreground" Value="#606060" />
            <Setter Property="Margin" Value="4,4" />
        </Style>
        <!-- Config check style -->
        <Style x:Key="ConfigCheckStyle" TargetType="{x:Type CheckBox}">
            <Setter Property="FontSize" Value="12px" />
            <Setter Property="Foreground" Value="#606060" />
            <Setter Property="Margin" Value="4,4" />
        </Style>
        <!-- Config label style -->
        <Style x:Key="ConfigLabelStyle" TargetType="{x:Type Label}">
            <Setter Property="FontSize" Value="12px" />
            <Setter Property="Foreground" Value="#606060" />
            <Setter Property="Margin" Value="4,4" />
        </Style>
        <Style x:Key="ConfigLabel2Style" TargetType="{x:Type Label}">
            <Setter Property="FontSize" Value="12px" />
        </Style>
        <!-- Config stack hori style -->
        <Style x:Key="ConfigStackHoriStyle" TargetType="{x:Type StackPanel}">

        </Style>
        <!-- Config slider style -->
        <Style x:Key="ConfigSliderStyle" TargetType="{x:Type Slider}">

        </Style>
        <!-- Config textbox style -->
        <Style x:Key="ConfigTextBoxStyle" TargetType="{x:Type TextBox}">

        </Style>
        <!-- Config button style -->
        <Style x:Key="ConfigButtonStyle" TargetType="{x:Type Button}">

        </Style>
        <!-- Config grid style -->
        <Style x:Key="ConfigGridStyle" TargetType="{x:Type Grid}">

        </Style>

        <!-- Image button style -->
        <Style TargetType="{x:Type Button}" x:Key="ImageButtonStyle">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <ContentPresenter />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- Navigation button style -->
        <Style x:Key="NavigationButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="#E8E8F0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" ClipToBounds="True">
                            <!-- Inner Rectangle with rounded corners. -->
                            <Rectangle x:Name="innerRectangle" HorizontalAlignment="Stretch"
                                       VerticalAlignment="Stretch" Fill="{TemplateBinding Background}" Stroke="#D8D8E0" Opacity="0" />
                            <!-- Present Text of the button. -->
                            <DockPanel Name="myContentPresenterDockPanel">
                                <ContentPresenter x:Name="myContentPresenter" Margin="20,0,0,0"
                                                  Content="{TemplateBinding Content}" VerticalAlignment="Center" 
                                                  TextBlock.Foreground="Black" TextBlock.FontSize="13px"/>
                            </DockPanel>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <!-- Set properties when mouse pointer is over the button. -->
                            <Trigger Property="IsMouseOver" Value="True">
                                <!-- Sets the glass opacity to 1, therefore, the glass "appears" when user mouses over it. -->
                                <Setter Property="Rectangle.Opacity" Value="1" TargetName="innerRectangle" />

                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- Collection button style -->
        <Style x:Key="CollectionButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="#EEEEEE" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" ClipToBounds="True">
                            <!-- Inner Rectangle with rounded corners. -->
                            <Rectangle x:Name="innerRectangle" HorizontalAlignment="Stretch"
                                       VerticalAlignment="Stretch" Fill="{TemplateBinding Background}" Stroke="#BBBBBB"
                                       Opacity="1"  />
                            <!-- Present Text of the button. -->
                            <DockPanel Name="myContentPresenterDockPanel">
                                <ContentPresenter x:Name="myContentPresenter" Content="{TemplateBinding Content}"
                                                  VerticalAlignment="Center" HorizontalAlignment="Center"
                                                  TextBlock.Foreground="Black" TextBlock.FontSize="12px" />
                            </DockPanel>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <!-- Set properties when mouse pointer is over the button. -->
                            <Trigger Property="IsMouseOver" Value="True">
                                <!-- Sets the glass opacity to 1, therefore, the glass "appears" when user mouses over it. -->
                                <Setter Property="Rectangle.Fill" Value="#F8F8F8"  TargetName="innerRectangle" />

                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- Collection2 button style -->
        <Style x:Key="Collection2ButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="#EEEEF8" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" ClipToBounds="True">
                            <!-- Inner Rectangle with rounded corners. -->
                            <Rectangle x:Name="innerRectangle" HorizontalAlignment="Stretch"
                                       VerticalAlignment="Stretch" Fill="{TemplateBinding Background}" Stroke="#80BBBBBB"
                                       StrokeThickness="1" Opacity="0"  />
                            <!-- Present Text of the button. -->
                            <DockPanel Name="myContentPresenterDockPanel">
                                <ContentPresenter x:Name="myContentPresenter" Content="{TemplateBinding Content}"
                                                  VerticalAlignment="Center" HorizontalAlignment="Center"
                                                  TextBlock.Foreground="Black" TextBlock.FontSize="12px" />
                            </DockPanel>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <!-- Set properties when mouse pointer is over the button. -->
                            <Trigger Property="IsMouseOver" Value="True">
                                <!-- Sets the glass opacity to 1, therefore, the glass "appears" when user mouses over it. -->
                                <Setter Property="Rectangle.Opacity" Value="0.75"  TargetName="innerRectangle" />

                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- Texture button style -->
        <Style x:Key="TextureButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Width" Value="32" />
            <Setter Property="Height" Value="32" />
            <Setter Property="Margin" Value="8" />
        </Style>
        <Style x:Key="SmallTextureButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Width" Value="24" />
            <Setter Property="Height" Value="24" />
            <Setter Property="Margin" Value="8" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid Name="SB" Width="{TemplateBinding Width}"   
                              Height="{TemplateBinding Height}" ClipToBounds="True" Background="{TemplateBinding Background}">
                            <Grid.Effect>
                                <DropShadowEffect BlurRadius="3" ShadowDepth="1" Color="Black" Opacity="0.1"/>
                            </Grid.Effect>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="SB" Property="Opacity" Value="0.7"></Setter>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="SB" Property="Opacity" Value="1" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- Base button style -->
        <Style x:Key="BaseButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource TextureButtonStyle}">
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect BlurRadius="10" ShadowDepth="1" Color="#CD1E5D" Opacity="0.2"/>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- Base button style2 -->
        <Style x:Key="BaseButtonStyle2" TargetType="{x:Type Button}" BasedOn="{StaticResource TextureButtonStyle}">
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect BlurRadius="10" ShadowDepth="1" Color="#5d9cec" Opacity="0.2"/>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- Play button style -->
        <Style x:Key="PlayButtonStyle" TargetType="{x:Type Button}"  BasedOn="{StaticResource BaseButtonStyle}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid Width="{TemplateBinding Width}"   
                              Height="{TemplateBinding Height}" ClipToBounds="True">
                            <Ellipse x:Name="ButtonEllipse" Width="Auto" Height="Auto" StrokeThickness="2" Stroke="White" >
                                <Ellipse.Fill>
                                    <ImageBrush ImageSource="{DynamicResource TextrueSource1}" Stretch="None"/>
                                </Ellipse.Fill>
                            </Ellipse>

                            <Polygon x:Name="ButtonPolygon" Points="12,9 23,16 12,23" Stroke="White" StrokeThickness="0">
                                <Polygon.Fill>
                                    <SolidColorBrush Color="White" Opacity="0.9" />
                                </Polygon.Fill>
                            </Polygon>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="ButtonEllipse" Property="Opacity" Value="0.9"></Setter>
                                <Setter TargetName="ButtonPolygon" Property="Opacity" Value="1"></Setter>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="ButtonPolygon" Property="Opacity" Value="0.8" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- Play button style -->
        <Style x:Key="PauseButtonStyle" TargetType="{x:Type Button}"  BasedOn="{StaticResource BaseButtonStyle}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid Width="{TemplateBinding Width}"   
                              Height="{TemplateBinding Height}" ClipToBounds="True">
                            <Ellipse x:Name="ButtonEllipse" Width="Auto" Height="Auto" StrokeThickness="2" Stroke="White" >
                                <Ellipse.Fill>
                                    <ImageBrush ImageSource="{DynamicResource TextrueSource1}" Stretch="None"/>
                                </Ellipse.Fill>
                            </Ellipse>
                            <Line x:Name="ButtonLine1" StrokeThickness="4" Stroke="White" Opacity="0.9" >
                                <Line.X1>19</Line.X1>
                                <Line.Y1>10</Line.Y1>
                                <Line.X2>19</Line.X2>
                                <Line.Y2>22</Line.Y2>
                            </Line>
                            <Line x:Name="ButtonLine2" StrokeThickness="4" Stroke="White" Opacity="0.9" >
                                <Line.X1>13</Line.X1>
                                <Line.Y1>10</Line.Y1>
                                <Line.X2>13</Line.X2>
                                <Line.Y2>22</Line.Y2>
                            </Line>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="ButtonEllipse" Property="Opacity" Value="0.9"></Setter>
                                <Setter TargetName="ButtonLine1" Property="Opacity" Value="1"></Setter>
                                <Setter TargetName="ButtonLine2" Property="Opacity" Value="1"></Setter>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="ButtonLine1" Property="Opacity" Value="0.8" />
                                <Setter TargetName="ButtonLine2" Property="Opacity" Value="0.8" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- Prev button style -->
        <Style x:Key="PrevButtonStyle" TargetType="{x:Type Button}"  BasedOn="{StaticResource BaseButtonStyle}">
            <Setter Property="Width" Value="28" />
            <Setter Property="Height" Value="28" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid Width="{TemplateBinding Width}"   
                              Height="{TemplateBinding Height}" ClipToBounds="True">
                            <Ellipse x:Name="ButtonEllipse" Width="Auto" Height="Auto" StrokeThickness="2" Stroke="White" >
                                <Ellipse.Fill>
                                    <ImageBrush ImageSource="{DynamicResource TextrueSource1}" Stretch="None"/>
                                </Ellipse.Fill>
                            </Ellipse>
                            <Line x:Name="ButtonLine" StrokeThickness="2" Stroke="White" Opacity="0.9" >
                                <Line.X1>10</Line.X1>
                                <Line.Y1>9</Line.Y1>
                                <Line.X2>10</Line.X2>
                                <Line.Y2>19</Line.Y2>
                            </Line>
                            <Polygon x:Name="ButtonPolygon" Points="19,8 10,14 19,20"  Stroke="White"  StrokeThickness="0">
                                <Polygon.Fill>
                                    <SolidColorBrush Color="White" Opacity="0.9" />
                                </Polygon.Fill>
                            </Polygon>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="ButtonEllipse" Property="Opacity" Value="0.9"></Setter>
                                <Setter TargetName="ButtonPolygon" Property="Opacity" Value="1"></Setter>
                                <Setter TargetName="ButtonLine" Property="Opacity" Value="1"></Setter>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="ButtonPolygon" Property="Opacity" Value="0.8" />
                                <Setter TargetName="ButtonLine" Property="Opacity" Value="0.8" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- Next button style -->
        <Style x:Key="NextButtonStyle" TargetType="{x:Type Button}"  BasedOn="{StaticResource BaseButtonStyle}">
            <Setter Property="Width" Value="28" />
            <Setter Property="Height" Value="28" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid Width="{TemplateBinding Width}"   
                              Height="{TemplateBinding Height}" ClipToBounds="True">
                            <Ellipse x:Name="ButtonEllipse" Width="Auto" Height="Auto" StrokeThickness="2" Stroke="White" >
                                <Ellipse.Fill>
                                    <ImageBrush ImageSource="{DynamicResource TextrueSource1}" Stretch="None"/>
                                </Ellipse.Fill>
                            </Ellipse>
                            <Line x:Name="ButtonLine" StrokeThickness="2" Stroke="White" Opacity="0.9" >
                                <Line.X1>18</Line.X1>
                                <Line.Y1>9</Line.Y1>
                                <Line.X2>18</Line.X2>
                                <Line.Y2>19</Line.Y2>
                            </Line>
                            <Polygon x:Name="ButtonPolygon" Points="9,8 18,14 9,20"  Stroke="White"  StrokeThickness="0">
                                <Polygon.Fill>
                                    <SolidColorBrush Color="White" Opacity="0.9" />
                                </Polygon.Fill>
                            </Polygon>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="ButtonEllipse" Property="Opacity" Value="0.9"></Setter>
                                <Setter TargetName="ButtonPolygon" Property="Opacity" Value="1"></Setter>
                                <Setter TargetName="ButtonLine" Property="Opacity" Value="1"></Setter>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="ButtonPolygon" Property="Opacity" Value="0.8" />
                                <Setter TargetName="ButtonLine" Property="Opacity" Value="0.8" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- Open button style -->
        <Style x:Key="OpenButtonStyle" TargetType="{x:Type Button}"  BasedOn="{StaticResource BaseButtonStyle2}">
            <Setter Property="Width" Value="28" />
            <Setter Property="Height" Value="28" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid Width="{TemplateBinding Width}"   
                              Height="{TemplateBinding Height}" ClipToBounds="True">
                            <Ellipse x:Name="ButtonEllipse" Width="Auto" Height="Auto" StrokeThickness="2" Stroke="White" Fill="#5d9cec" />
                            <Line x:Name="ButtonLine" StrokeThickness="2" Stroke="White" Opacity="0.9" >
                                <Line.X1>8</Line.X1>
                                <Line.Y1>19</Line.Y1>
                                <Line.X2>20</Line.X2>
                                <Line.Y2>19</Line.Y2>
                            </Line>
                            <Polygon x:Name="ButtonPolygon" Points="8,16 14,7 20,16"  Stroke="White"  StrokeThickness="0">
                                <Polygon.Fill>
                                    <SolidColorBrush Color="White" Opacity="0.9" />
                                </Polygon.Fill>
                            </Polygon>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="ButtonEllipse" Property="Opacity" Value="0.9"></Setter>
                                <Setter TargetName="ButtonPolygon" Property="Opacity" Value="1"></Setter>
                                <Setter TargetName="ButtonLine" Property="Opacity" Value="1"></Setter>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="ButtonPolygon" Property="Opacity" Value="0.8" />
                                <Setter TargetName="ButtonLine" Property="Opacity" Value="0.8" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- Horizontal Slider repeat style1 -->
        <Style x:Key="HorizontalSliderRepeatButton" TargetType="RepeatButton">
            <Setter Property="Focusable" Value="false" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RepeatButton">
                        <Border Background="{StaticResource SliderBackground}" Height="5" >
                            <Border.Effect>
                                <DropShadowEffect BlurRadius="10" ShadowDepth="1" Color="#FC59A3" Opacity="0.2"/>
                            </Border.Effect>
                        </Border>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- Horizontal Slider repeat style2 -->
        <Style x:Key="HorizontalSliderRepeatButton1" TargetType="RepeatButton">
            <Setter Property="Focusable" Value="false" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RepeatButton">
                        <Border Background="#EAEAEA" Height="3"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- Vertical Slider repeat style1 -->
        <Style x:Key="VerticalSliderRepeatButton" TargetType="RepeatButton">
            <Setter Property="Focusable" Value="false" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RepeatButton">
                        <Border Background="{StaticResource SliderBackground}" Width="5" >
                            <Border.Effect>
                                <DropShadowEffect BlurRadius="10" ShadowDepth="1" Color="#FC59A3" Opacity="0.2"/>
                            </Border.Effect>
                        </Border>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- Vertical Slider repeat style2 -->
        <Style x:Key="VerticalSliderRepeatButton1" TargetType="RepeatButton">
            <Setter Property="Focusable" Value="false" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RepeatButton">
                        <Border Background="#EAEAEA" Width="3"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- Slider thumb -->
        <Style x:Key="SliderThumbStyle" TargetType="{x:Type Thumb}">
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Height" Value="20" />
            <Setter Property="Width" Value="20" />
            <Setter Property="Margin" Value="-5" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Grid>
                            <Ellipse Width="15" Height="15" Fill="#FC59A3" Stroke="#FFFFFF" StrokeThickness="2" >
                                <Ellipse.Effect>
                                    <DropShadowEffect BlurRadius="10" ShadowDepth="1" Color="#FC59A3" Opacity="0.2"/>
                                </Ellipse.Effect>
                            </Ellipse>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- Horizontal slider pink style -->
        <Style x:Key="HorizontalSliderPinkStyle" TargetType="Slider">
            <Setter Property="Focusable" Value="false" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Slider">
                        <Grid>
                            <!--<Border Grid.Column="0" Height="10" BorderBrush="Gray" BorderThickness="1" CornerRadius="3">-->
                            <Track Name="PART_Track">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Style="{StaticResource HorizontalSliderRepeatButton}" Command="Slider.DecreaseLarge"/>
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Style="{StaticResource HorizontalSliderRepeatButton1}" Command="Slider.IncreaseLarge"/>
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{StaticResource SliderThumbStyle}"/>
                                </Track.Thumb>
                            </Track>
                            <!--</Border>-->
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--Vertical slider pink style -->
        <Style x:Key="VerticalSliderPinkStyle" TargetType="Slider">
            <Setter Property="Focusable" Value="false" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Slider">
                        <Grid>
                            <Track Name="PART_Track">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Style="{StaticResource VerticalSliderRepeatButton}" Command="Slider.DecreaseLarge"/>
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Style="{StaticResource VerticalSliderRepeatButton1}" Command="Slider.IncreaseLarge"/>
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{StaticResource SliderThumbStyle}"/>
                                </Track.Thumb>
                            </Track>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--List View-->
        <Style x:Key="MyHeaderStyle" TargetType="{x:Type GridViewColumnHeader}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                        <Border Background="#fafafa" BorderThickness="1,1,0,1" BorderBrush="#e1e1e2" Width="{TemplateBinding Width}">
                            <TextBlock Padding="5" Text="{TemplateBinding Content}" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <!--<Setter Property="Background" Value="#fafafa"/>-->
            <Setter Property="Padding" Value="5"/>
            <Setter Property="MinWidth" Value="50"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                                <Grid>
                                    <Border Background="#ebeced" BorderThickness="1,1,0,1" BorderBrush="#e1e1e2">
                                        <TextBlock Padding="5" Text="{TemplateBinding Content}" />
                                    </Border>
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="HiddenHeaderStyle" TargetType="{x:Type GridViewColumnHeader}">
            <Setter Property="Visibility" Value="Collapsed"/>
        </Style>
        <Style TargetType="{x:Type ListViewItem}" x:Key="GridView">
            <Style.Resources>
                <!--ItemDefault Template-->
                <ControlTemplate x:Key="ItemDefault" TargetType="{x:Type ListViewItem}">
                    <Border Background="#80fafafa" x:Name="SelectedItem">
                        <GridViewRowPresenter Content="{TemplateBinding Content}"
                                              Columns="{TemplateBinding GridView.ColumnCollection}"/>
                    </Border>
                </ControlTemplate>
                <!--ItemDefault2 Template-->
                <ControlTemplate x:Key="ItemDefault2" TargetType="{x:Type ListViewItem}">
                    <Border Background="#80f5f5f7" x:Name="SelectedItem">
                        <GridViewRowPresenter Content="{TemplateBinding Content}"
                                              Columns="{TemplateBinding GridView.ColumnCollection}"/>
                    </Border>
                </ControlTemplate>
                <!--ItemSelectedActived Template-->
                <ControlTemplate x:Key="ItemSelectedActive" 
                                 TargetType="{x:Type ListViewItem}">
                    <Border Background="#b0e3e3e5" x:Name="SelectedItem">
                        <GridViewRowPresenter Content="{TemplateBinding Content}"
                                              Columns="{TemplateBinding GridView.ColumnCollection}"/>
                    </Border>
                </ControlTemplate>
                <!--ItemSelected Template-->
                <ControlTemplate x:Key="ItemSelected" 
                                 TargetType="{x:Type ListViewItem}">
                    <Border Background="#b0e3e3e5" x:Name="SelectedItem">
                        <GridViewRowPresenter Content="{TemplateBinding Content}"
                                              Columns="{TemplateBinding GridView.ColumnCollection}"/>
                    </Border>
                </ControlTemplate>
                <!--ItemMouseMove Template-->
                <ControlTemplate x:Key="ItemMouseOver" TargetType="{x:Type ListViewItem}">
                    <Border Background="#80ebeced" x:Name="SelectedItem">
                        <GridViewRowPresenter Content="{TemplateBinding Content}"
                                              Columns="{TemplateBinding GridView.ColumnCollection}"/>
                    </Border>
                </ControlTemplate>
            </Style.Resources>
            <Setter Property="Template" Value="{StaticResource ItemDefault}" />
            <Style.Triggers>
                <Trigger Property="ListBox.AlternationIndex" Value="1">
                    <Setter Property="Template" Value="{StaticResource ItemDefault2}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Template"
                            Value="{StaticResource ItemMouseOver}" />
                </Trigger>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Template"
                            Value="{StaticResource ItemSelected}" />
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="true" />
                        <Condition Property="Selector.IsSelectionActive" Value="true" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Template"
                            Value="{StaticResource ItemSelectedActive}" />
                </MultiTrigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type ListView}">
            <Setter Property="AlternationCount" Value="2"/>
        </Style>

        <!--Tab Item-->
        <SolidColorBrush x:Key="TabItemDisabledBackground" Color="#F4F4F4"/>
        <SolidColorBrush x:Key="TabItemDisabledBorderBrush" Color="#FFC9C7BA"/>
        <Style x:Key="PinkTabItem"  TargetType="{x:Type TabItem}">
            <!--<Setter Property="FocusVisualStyle" Value="{x:null}"/>-->
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabItem}">
                        <Grid SnapsToDevicePixels="True" Height="40" MinWidth="110">
                            <Path Margin="0 0 0 -12" x:Name="PATH" Visibility="Collapsed"
                                  Data="M0.5,0.5 L109.5,0.5 109.5,39.5 64,40 57,51 49,40 0.5,39.5 z" Fill="#dc498d"
                                  Height="51.5" Stretch="Fill" Stroke="Transparent" Width="110" />
                            <Border x:Name="Bd" Background="#40dfe9f6">
                                <ContentPresenter Margin="5,0" x:Name="Content" ContentSource="Header"
                                                  HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                                  RecognizesAccessKey="True"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                                  />
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true"/>
                                    <Condition Property="TabStripPlacement" Value="Top"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Visibility" Value="visible" TargetName="PATH"/>
                                <Setter Property="Foreground" Value="White"></Setter>
                                <Setter Property="Background" Value="#dc498d" TargetName="Bd"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource TabItemDisabledBackground}"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource TabItemDisabledBorderBrush}"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--StatusIcon-->
        <SolidColorBrush x:Key="MenuBorderBrush" Color="#40000000" />
        <SolidColorBrush x:Key="MenuBackground" Color="#FEFEFF" />
        <SolidColorBrush x:Key="MenuForeground" Color="#505050" />
        <DropShadowEffect x:Key="DefaultDropShadow" BlurRadius="4" ShadowDepth="0" Opacity="0.25" ></DropShadowEffect>
        <Style x:Key="DefaultMenuItem">
            <Setter Property="MenuItem.Margin" Value="0" />
            <Setter Property="MenuItem.Height" Value="30" />
            <Setter Property="MenuItem.Header" Value="{Binding Ticker}" />
            <Setter Property="MenuItem.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type MenuItem}">
                        <Border Margin="1" MinWidth="80" CornerRadius="5">
                            <Border.Background>
                                <SolidColorBrush x:Name="MyAnimatedBrushBackground" Color="Transparent" />
                            </Border.Background>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text=" " />
                                <ContentPresenter ContentSource="Icon" HorizontalAlignment="Center"
                                                  VerticalAlignment="Center" Width="26" Height="26"/>
                                <TextBlock Text="   " />
                                <ContentPresenter ContentSource="Header" HorizontalAlignment="Center"
                                                  VerticalAlignment="Center" />
                            </StackPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True" />
                                </MultiTrigger.Conditions>
                                <MultiTrigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                          Storyboard.TargetName="MyAnimatedBrushBackground"
                                                                          Storyboard.TargetProperty="Color">
                                                <LinearColorKeyFrame Value="Transparent" KeyTime="00:00:00.0000000" />
                                                <LinearColorKeyFrame Value="#7E9C9C9C" KeyTime="00:00:00.1000000" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.EnterActions>
                                <MultiTrigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                          Storyboard.TargetName="MyAnimatedBrushBackground"
                                                                          Storyboard.TargetProperty="Color">
                                                <LinearColorKeyFrame Value="#7E9C9C9C" KeyTime="00:00:00.0000000" />
                                                <LinearColorKeyFrame Value="Transparent" KeyTime="00:00:00.1000000" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.ExitActions>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="DefaultContextMenu" TargetType="{x:Type ContextMenu}">
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled" />
            <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
            <Setter Property="BorderBrush" Value="{StaticResource MenuBorderBrush}"/>
            <Setter Property="Background" Value="{StaticResource MenuBackground}"/>
            <Setter Property="Foreground" Value="{StaticResource MenuForeground}"/>
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Grid.IsSharedSizeScope" Value="True" />
            <Setter Property="HasDropShadow" Value="True" />
            <Setter Property="Width" Value="200" />
            <!--<Setter Property="ItemContainerStyle" Value="{StaticResource DefaultMenuItem}" />-->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ContextMenu}">
                        <Grid>
                            <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" Margin="5"
                                BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                                Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle"
                                                Grid.IsSharedSizeScope="True" Margin="0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                KeyboardNavigation.TabNavigation="Cycle" />
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasDropShadow" Value="True">
                                <Setter TargetName="Border" Property="Effect" Value="{StaticResource DefaultDropShadow}">
                                </Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Application.Resources>
</Application>
